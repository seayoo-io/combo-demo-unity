#!/usr/bin/env groovy

SAFE_BRANCH_NAME = env.BRANCH_NAME ?: 'main'

zipUrl = ''

def callUnity(Map map = [:]) {
    def project = map.get('project', '.')
    def commands = map.get('commands', '')

    def defaultLogFile = env.STAGE_NAME.replaceAll("\\s", "-").toLowerCase()
    def logFile = map.get('logFile', "logs\\${defaultLogFile}.log")

    bat "${env.UNITY_ROOT}\\Editor\\Unity.exe -projectPath ${project} -quit -batchmode ${commands} -logFile ${logFile}"
}

def downloadUnitySDK() {
    build job: params.UNITY_SDK_PROJECT_NAME, propagate: true, wait: true
    def unitySDKZip = "*.zip"
    copyArtifacts projectName: "${params.UNITY_SDK_PROJECT_NAME}", selector: lastSuccessful(), filter: unitySDKZip

    def files = findFiles glob: unitySDKZip
    unzip zipFile: files[0].name, dir: env.UNITY_SDK_PATH, quiet: true
}

def downloadVuplex() {
    def packageFile = 'package.json'
    if(fileExists(packageFile))
    {
        def lastVuplexFile = readFile(packageFile)
        def packageJson = readJSON text: lastVuplexFile
        def vuplexUrl = packageJson['vuplex-url']
        if(vuplexUrl == "${params.UNITY_VUPLEX_URL}")
        {
            return
        }
    }
    
    def vuplexZip = "Vuplex.zip"

    bat "curl -o ${vuplexZip} ${params.UNITY_VUPLEX_URL}"
    def newPackageJson = [
        "vuplex-url": "${params.UNITY_VUPLEX_URL}"
    ]
    writeFile file: packageFile, text: groovy.json.JsonOutput.toJson(newPackageJson)
    unzip zipFile: vuplexZip, dir: env.UNITY_VUPLEX_PATH, quiet: true
}

def getEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://api.dev.seayoo.com" : "https://api.seayoo.com"
}

def getDemoEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://combo-demo.dev.seayoo.com" : "https://combo-demo.seayoo.com"
}

def writeComboYaml(buildKey) {
    def endpoint = getEndpoint()
    def gameId = params.GAME_ID
    writeFile file: 'combo.yaml', text: """
combo:
  game-id: ${gameId}
  build-key: ${buildKey}
  endpoint: ${endpoint}
"""
}

def installComboCLI() {
    def comboZip = "combo_main_windows_amd64.zip"
    copyArtifacts projectName: 'SDK/Client/Combo/cli/main', filter: comboZip
    unzip comboZip
}

pipeline {
    agent {
        node {
            label 'omnisdk-unity:windows'
        }
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
        timestamps()
    }
    parameters {
        string(name: 'GAME_ID', defaultValue: 'demo', description: 'GAME_ID', trim: true)
        string(name: 'BUNDLE_VERSION', defaultValue: '1.0.0', description: 'Demo Bundle Version', trim: true)
        choice(name: 'TARGET_ENV',
            choices: ['dev', 'prod'],
            description: 'Which environment to build.')
        string(name: 'UNITY_SDK_PROJECT_NAME',
            defaultValue: "SDK/Client/Combo/unity/${env.BRANCH_NAME}",
            description: 'Unity SDK 工程的 Jenkins Full project name',
            trim: true)
        booleanParam(name: 'CLEAN_WS',
            defaultValue: false,
            description: 'When checked, will clean workspace.')
        string(name: 'UNITY_VUPLEX_URL',
            defaultValue: 'https://s3.shiyou.kingsoft.com/software/vuplex/4.8/Vuplex.zip',
            description: 'Vuplex Path',
            trim: true)
    }
    environment {
        UNITY_ROOT = getUnityRoot('2019.4.40f1')
        UNITY_SDK_PATH = "${env.WORKSPACE}/Packages"
        UNITY_VUPLEX_PATH = "${env.WORKSPACE}/Assets"
    }
    stages {
        stage('Clean and Setup') {
            steps {
                script {
                    if (params.CLEAN_WS) {
                        cleanWs()
                    }
                    bat """
                        IF EXIST *.zip del /F /Q *.zip
                        IF EXIST logs rd /S /Q logs
                        IF EXIST Build rd /S /Q Build
                        IF EXIST Build rd /S /Q ${env.UNITY_SDK_PATH}/com.seayoo.sdk
                    """
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    // For Unity Build
                    bat 'IF NOT EXIST logs mkdir logs'
                }
            }
        }
        stage('Integrate UnitySDK') {
            steps {
                script {
                    downloadUnitySDK()
                }
            }
        }
        stage('Integrate Vuplex') {
            steps {
                script {
                    downloadVuplex()
                }
            }
        }
        stage('Switch Platform') {
            steps {
                script {
                    def platformFile = 'platform.txt'
                    if (fileExists(platformFile)) {
                        echo 'Current platform was already Win64, skip switch.'
                    } else {
                        callUnity  commands: '-buildTarget Win64'
                        writeFile file: platformFile, text: 'Win64'
                    }
                }
            }
        }
        stage('Gen') {
            steps {
                installComboCLI()
                withCredentials([string(variable: 'COMBOSDK_BUILD_KEY', credentialsId: 'combo-demo.build-key')]) {
                    writeComboYaml(COMBOSDK_BUILD_KEY)
                }
                bat '''
                    combo windows setup
                    move /Y ComboSDK.json Assets/Resources
                '''
            }
        }
        stage('Update Settings') {
            environment {
                COMBOSDK_GAME_ID = "${params.GAME_ID}"
                COMBOSDK_ENDPOINT = getEndpoint()
            }
            steps {
                script {
                    withCredentials([string(variable: 'COMBOSDK_PUBLISHABLE_KEY', credentialsId: 'combo-demo.publishable-key')]) {
                        callUnity commands: "-executeMethod Builder.UpdateComboSDKSettings"
                    }
                }
            }
        }
        stage('Build') {
            environment {
                EXPORT_PATH = "${env.WORKSPACE}\\Build\\Windows"
                DEMO_ENDPOINT = getDemoEndpoint()
                BUNDLE_VERSION = "${params.BUNDLE_VERSION}"
            }
            steps {
                script {
                    callUnity commands: "-executeMethod Builder.BuildWindowsDemo"
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    def zipFileName = artifactName name: "combo-demo", extension: "zip"
                    zip zipFile: zipFileName, dir: "Build\\Windows", archive: true, overwrite: true, exclude: "*_BackUpThisFolder_ButDontShipItWithYourGame/**"
                    zipUrl = "${env.BUILD_URL}artifact/${zipFileName}"
                }
            }
        }
        stage('Upload Symbol') {
            steps {
                withSentryCLI() {
                    withCredentials([string(variable: 'SENTRY_TOKEN', credentialsId: ' sentry-token.seayoo-cn')]) {
                        bat """sentry-cli-Windows-x86_64.exe --url=https://sentry.seayoo.com upload-dif \
                            --org sentry \
                            --project combo-demo-unity \
                            --auth-token ${SENTRY_TOKEN} \
                            --wait Build\\Windows\\combosdk-unity-demo_Data\\Plugins\\x86_64\\sentry.dll Build\\Windows\\GameAssembly.dll Build\\Windows\\UnityPlayer.dll """
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def downloads = [
                    ['name': '[zip]', 'url': zipUrl]
                ]
                notify withDuration: true, withSummary: true, withChanges: true, downloads: downloads
            }
        }
        failure {
            notify withDuration: true, withSummary: true, withChanges: true, withErrors: true
        }
        always {
            script {
                zip archive: true, zipFile: 'logs.zip', dir: 'logs'
            }
        }
    }
}
