#!/usr/bin/env groovy

DISTRO_LIST = ['windows', 'lenovo_pc', 'w17173', 'taptap_pc']

SAFE_BRANCH_NAME = env.BRANCH_NAME ?: 'main'

zipUrl = ''

def callUnity(Map map = [:]) {
    def project = map.get('project', '.')
    def commands = map.get('commands', '')

    def defaultLogFile = env.STAGE_NAME.replaceAll("\\s", "-").toLowerCase()
    def logFile = map.get('logFile', "logs/${defaultLogFile}.log")

    sh "${env.UNITY_ROOT} -projectPath ${project} -quit -batchmode ${commands} -logFile ${logFile}"
}

def downloadUnitySDK() {
    build job: params.UNITY_SDK_PROJECT_NAME, propagate: true, wait: true
    def unitySDKZip = "*.zip"
    copyArtifacts projectName: "${params.UNITY_SDK_PROJECT_NAME}", selector: lastSuccessful(), filter: unitySDKZip

    def files = findFiles glob: unitySDKZip
    unzip zipFile: files[0].name, dir: env.UNITY_SDK_PATH, quiet: true
}

def downloadVuplex() {
    def packageFile = 'package.json'
    if (fileExists(packageFile)) {
        def lastVuplexFile = readFile(packageFile)
        def packageJson = readJSON text: lastVuplexFile
        def vuplexUrl = packageJson['vuplex-url']
        if (vuplexUrl == "${params.UNITY_VUPLEX_URL}") {
            return
        }
    }

    def vuplexZip = "Vuplex.zip"

    sh """curl -o ${vuplexZip} ${params.UNITY_VUPLEX_URL}"""
    def newPackageJson = [
        "vuplex-url": "${params.UNITY_VUPLEX_URL}"
    ]
    writeFile file: packageFile, text: groovy.json.JsonOutput.toJson(newPackageJson)
    unzip zipFile: vuplexZip, dir: env.UNITY_VUPLEX_PATH, quiet: true
}

def getEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://api.dev.seayoo.com" : "https://api.seayoo.com"
}

def getDemoEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://combo-demo.dev.seayoo.com" : "https://combo-demo.seayoo.com"
}

def getTargetDistros() {
    return DISTRO_LIST.join(',')
}

def setVisibleItemCount() {
    return DISTRO_LIST.size()
}

def writeComboYaml(buildKey) {
    def endpoint = getEndpoint()
    def gameId = params.GAME_ID
    writeFile file: 'combo.yaml', text: """
combo:
  game-id: ${gameId}
  build-key: ${buildKey}
  endpoint: ${endpoint}
"""
}

def installComboCLI() {
    def comboZip = "combo-cli_main_darwin_arm64.zip"
    copyArtifacts projectName: 'SDK/Client/Combo/cli/main', filter: comboZip
    unzip comboZip
}

pipeline {
    agent {
        node {
            label 'mac-9 (M1 Max)'
        }
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
        timestamps()
    }
    parameters {
        string(name: 'GAME_ID', defaultValue: 'demo', description: 'GAME_ID', trim: true)
        string(name: 'BUNDLE_VERSION', defaultValue: '1.0.0', description: 'Demo Bundle Version', trim: true)
        extendedChoice(
            name: 'DISTRO',
            type: 'PT_MULTI_SELECT',
            description: '选择发布的模块， 支持多选 (按住 Ctrl 键并单击每一个选项；或者按住 Shift 键并单击要选的第一个选项和要选的最后一个选项以圈定范围)',
            value: getTargetDistros(),
            defaultValue: 'windows',
            multiSelectDelimiter: ',',
            quoteValue: false,
            saveJSONParameterToFile: false,
            visibleItemCount: setVisibleItemCount()
        )
        choice(name: 'CHECK_UPDATE', choices: ['SKIP_UPDATE', 'HOT_UPDATE', 'FORCE_UPDATE'], description: '模拟游戏的检查更新行为: SKIP_UPDATE-不更新; HOT_UPDATE-热更新; FORCE_UPDATE-强制更新')
        choice(name: 'TARGET_ENV',
            choices: ['dev', 'prod'],
            description: 'Which environment to build.(注意：游戏项目只能在 prod 环境下打包)')
        string(name: 'UNITY_SDK_PROJECT_NAME',
            defaultValue: "SDK/Client/Combo/unity/${SAFE_BRANCH_NAME}",
            description: 'Unity SDK 工程的 Jenkins Full project name',
            trim: true)
        booleanParam(name: 'CLEAN_WS',
            defaultValue: false,
            description: 'When checked, will clean workspace.')
        string(name: 'UNITY_VUPLEX_URL',
            defaultValue: 'https://s3.shiyou.kingsoft.com/software/vuplex/4.10.1/Vuplex.zip',
            description: 'Vuplex Path',
            trim: true)
    }
    environment {
        UNITY_ROOT = getTuanjie('2022.3.61t1')
        UNITY_SDK_PATH = "${env.WORKSPACE}/Packages"
        UNITY_VUPLEX_PATH = "${env.WORKSPACE}/Assets"
    }
    stages {
        stage('Clean and Setup') {
            steps {
                script {
                    if (params.CLEAN_WS) {
                        cleanWs()
                    }
                    sh """
                        rm -rf *.zip
                        rm -rf logs/*
                        rm -rf Build/*
                        rm -rf ${env.UNITY_SDK_PATH}/com.seayoo.sdk
                    """
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    // For Unity Build
                    sh 'mkdir -p logs'
                }
            }
        }
        stage('Integrate UnitySDK') {
            steps {
                script {
                    downloadUnitySDK()
                }
            }
        }
        stage('Integrate Vuplex') {
            steps {
                script {
                    downloadVuplex()
                }
            }
        }
        stage('Switch Platform') {
            steps {
                script {
                    def platformFile = 'platform.txt'
                    if (fileExists(platformFile)) {
                        echo 'Current platform was already Win64, skip switch.'
                    } else {
                        callUnity commands: '-buildTarget Win64'
                        writeFile file: platformFile, text: 'Win64'
                    }
                }
            }
        }
        stage('Update Settings') {
            environment {
                COMBOSDK_GAME_ID = "${params.GAME_ID}"
                COMBOSDK_ENDPOINT = getEndpoint()
            }
            steps {
                script {
                    def publishableKeyId = "combo-${params.GAME_ID}.publishable-key"
                    withCredentials([
                        string(variable: 'COMBOSDK_PUBLISHABLE_KEY', credentialsId: publishableKeyId)
                    ]) {
                        callUnity commands: "-executeMethod Builder.UpdateComboSDKSettings"
                    }
                }
            }
        }
       stage('Gen-Build-Archive') {
            environment {
                DEMO_ENDPOINT = getDemoEndpoint()
                BUNDLE_VERSION = "${params.BUNDLE_VERSION}"
                CHECK_UPDATE = "${params.CHECK_UPDATE}"
                COMBOSDK_ENDPOINT = getEndpoint()
                COMBOSDK_GAME_ID = "${params.GAME_ID}"
            }
            steps {
                script {
                    installComboCLI()
                    def credentialsId = "combo-${params.GAME_ID}.build-key"
                    withCredentials([string(variable: 'COMBOSDK_BUILD_KEY', credentialsId: credentialsId)]) {
                        writeComboYaml(COMBOSDK_BUILD_KEY)
                    }
                }

                script {
                    def distros = params.DISTRO.split(',')
                    def downloads = []
                    
                    distros.each { distro ->
                        def exportPath = "${env.WORKSPACE}/build/${distro}"
                        def zipFileName = artifactName(name: "combo-demo", suffix: "-${distro}", extension: "zip")
                        def zipFilePath = "${exportPath}/${zipFileName}"

                        sh """
                            chmod +x ./combo
                            mkdir -p "${exportPath}" || exit 0
                            ${env.WORKSPACE}/combo windows setup --distro ${distro}
                            mv -f ${env.WORKSPACE}/ComboSDK.json ${env.WORKSPACE}/Assets/Resources
                        """
                        env.EXPORT_PATH = exportPath
                        def credentialsId = "combo-${params.GAME_ID}.build-key"
                        withCredentials([string(variable: 'COMBOSDK_BUILD_KEY', credentialsId: credentialsId)]) {
                            callUnity commands: "-executeMethod Builder.BuildWindowsDemo"
                        }

                        zip zipFile: zipFileName, dir: exportPath, archive: true, overwrite: true, exclude: "*_BackUpThisFolder_ButDontShipItWithYourGame/**"

                        downloads << [
                            name: "[${distro}]",
                            url: "${env.BUILD_URL}artifact/${zipFileName}"
                        ]

                        withSentryCLI() {
                            withCredentials([string(variable: 'SENTRY_TOKEN', credentialsId: 'sentry-token.seayoo-cn')]) {
                                sh """sentry-cli-Darwin-universal --url=https://sentry.seayoo.com upload-dif \
                                    --org sentry \
                                    --project combo-demo \
                                    --auth-token ${SENTRY_TOKEN} \
                                    --wait ${exportPath}/combosdk-unity-demo_Data/Plugins/x86_64/sentry.dll \
                                    ${exportPath}/GameAssembly.dll \
                                    ${exportPath}/UnityPlayer.dll """
                            }
                        }
                    }
                }
            }
        }

    }
    post {
        success {
            script {
                def downloads = []
                def distros = params.DISTRO.split(',')
                distros.each { distro ->
                    def zipName = artifactName(name: "combo-demo", suffix: "-${distro}", extension: "zip")
                    def downloadUrl = "${env.BUILD_URL}artifact/${zipName}"
                    downloads << [
                        'name': "[${distro}]",
                        'url': downloadUrl
                    ]
                }
                notify withDuration: true, withSummary: true, withChanges: true, downloads: downloads, what: "**distro: ${params.DISTRO}**"
            }
        }
        failure {
            notify withDuration: true, withSummary: true, withChanges: true, withErrors: true
        }
        always {
            script {
                currentBuild.displayName = "${BUILD_DISPLAY_NAME} ${params.GAME_ID} ${params.TARGET_ENV}"
                currentBuild.description = "distro: ${params.DISTRO}"
                zip archive: true, zipFile: 'logs.zip', dir: 'logs'
            }
        }
    }
}