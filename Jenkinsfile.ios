#!/usr/bin/env groovy

def callUnity(Map map = [:]) {
    def project = map.get('project', '.')
    def commands = map.get('commands', '')

    def defaultLogFile = env.STAGE_NAME.replaceAll("\\s", "-").toLowerCase()
    def logFile = map.get('logFile', "logs/${defaultLogFile}.log")

    sh "${env.UNITY_ROOT} -projectPath ${project} -quit -batchmode ${commands} -logFile ${logFile}"
}

def downloadUnitySDK() {
    build job: params.UNITY_SDK_PROJECT_NAME, propagate: true, wait: true
    def unitySDKZip = "*.zip"
    copyArtifacts projectName: "${params.UNITY_SDK_PROJECT_NAME}", selector: lastSuccessful(), filter: unitySDKZip

    def files = findFiles glob: unitySDKZip
    unzip zipFile: files[0].name, dir: env.UNITY_SDK_PATH, quiet: true
}

def writeComboYaml(buildKey) {
    def endpoint = getEndpoint()
    def gameId = params.GAME_ID
    writeFile file: 'combo.yaml', text: """
combo:
  game-id: ${gameId}
  build-key: ${buildKey}
  endpoint: ${endpoint}
"""
}

def downloadFrameworks() {
    def frameworkZip = "*.zip"
    copyArtifacts projectName: params.IOS_PROJECT_NAME, selector: lastSuccessful(), filter: frameworkZip, excludes: "*dsym*.zip"

    def files = findFiles glob: frameworkZip
    unzip zipFile: files[0].name, dir: env.FRAMEWORK_PATH, quiet: true
}

def downloadComboSDKJson() {
    sh '''
        chmod +x ./combo
        ./combo ios setup
    '''
}

def updateCodeSigningSettings() {
    sh """
        export LC_ALL=en_US.UTF-8
        export LANG=en_US.UTF-8
        fastlane run update_code_signing_settings path:"${BUILD_DIR}/Unity-iPhone.xcodeproj" code_sign_identity:"${env.CODE_SIGN_IDENTITY}" targets:"Unity-iPhone"
    """
}

def environmentParams = [
    'demo': [
        'bundleId': 'com.ksDemo.omni', 
        'codeSignId': 'Apple Development: TingTing Liu (QWVQYB57WJ)', 
        'provision': 'dev_provision',
        'developmentTeam': 'SP537S8Q2J',
        'exportOptionsPlist': 'combo-demo.export-options'
    ],
    'catsnsoup': [
        'bundleId': 'com.mt.zhuoli', 
        'codeSignId': 'iPhone Developer: fei gao (KDF9BF4JFY)', 
        'provision': 'MaoTang Dev',
        'developmentTeam': 'G7ZC763G33',
        'exportOptionsPlist': 'combo-catsnsoup.export-options'
    ]
] 

def installComboCLI() {
    def key = params.GAME_ID
    if (params.GAME_ID == 'catsnsoup' && params.TARGET_ENV == 'dev') {
        key = 'dev-catsnsoup'
    }
    def credentialsId = "combo-${key}.build-key"
    withCredentials([string(variable: 'COMBOSDK_BUILD_KEY', credentialsId: credentialsId)]) {
        writeComboYaml(COMBOSDK_BUILD_KEY)
    }

    def comboZip = "combo_main_darwin_arm64.zip"
    copyArtifacts projectName: 'SDK/Client/Combo/cli/main', filter: comboZip
    unzip zipFile: comboZip, quiet: true
}

def getEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://api.dev.seayoo.com" : "https://api.seayoo.com"
}

def getDemoEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://combo-demo.dev.seayoo.com" : "https://combo-demo.seayoo.com"
}

pipeline {
    agent {
        node {
            label 'combo-demo:ios'
        }
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
        timestamps()
    }
    parameters {
        choice(name: 'GAME_ID', choices: ['demo', 'catsnsoup'], description: 'GAME_ID')
        choice(name: 'TARGET_ENV', choices: ['dev', 'prod'], description: '选择线上/测试环境')
        string(name: 'BUNDLE_VERSION', defaultValue: '1.0.0', description: 'Demo Bundle Version', trim: true)
        choice(name: 'CHECK_UPDATE', choices: ['SKIP_UPDATE', 'HOT_UPDATE', 'FORCE_UPDATE'], description: '模拟游戏的检查更新行为: SKIP_UPDATE-不更新; HOT_UPDATE-热更新; FORCE_UPDATE-强制更新')
        extendedChoice(
            name: 'CAPABILITIES',
            type: 'PT_MULTI_SELECT',
            description: '支持的 Capabilities， 支持多选 (按住 Ctrl 键并单击每一个选项；或者按住 Shift 键并单击要选的第一个选项和要选的最后一个选项以圈定范围)，默认情况下为无',
            value: 'Nothing,SignInWithApple,PushNotifications',
            defaultValue: 'Nothing',
            multiSelectDelimiter: ',',
            quoteValue: false,
            saveJSONParameterToFile: false
        )
        string(name: 'IOS_PROJECT_NAME',
            defaultValue: 'SDK/Client/Combo/ios/main',
            description: 'iOS 工程的 Jenkins Full project name',
            trim: true)
        string(name: 'UNITY_SDK_PROJECT_NAME',
            defaultValue: "SDK/Client/Combo/unity/${env.BRANCH_NAME}",
            description: 'Unity SDK 工程的 Jenkins Full project name',
            trim: true)
        choice(name: 'SKIP_EXPORT', choices: ['NO', 'AUTO', 'YES'], description: '是否跳过 Export Project stage ')
        booleanParam(name: 'CLEAN_WS',
            defaultValue: false,
            description: 'When checked, will clean workspace.')
    }
    environment {
        UNITY_ROOT = getUnityRoot('2019.4.40f1')
        BUILD_DIR = "${env.WORKSPACE}/build"
        FRAMEWORK_PATH = "${env.WORKSPACE}/Frameworks"
        IOS_IPA = artifactName(name: "combo-demo", extension: "ipa")
        UNITY_SDK_PATH = "${env.WORKSPACE}/Packages"
        PRODUCT_BUNDLE_IDENTIFIER = environmentParams[params.GAME_ID]['bundleId'].toString()
        CODE_SIGN_IDENTITY = environmentParams[params.GAME_ID]['codeSignId'].toString()
        PROVISIONING_PROFILE_SPECIFIER = environmentParams[params.GAME_ID]['provision'].toString()
        DEVELOPMENT_TEAM = environmentParams[params.GAME_ID]['developmentTeam'].toString()
        CAPABILITIES = params.CAPABILITIES.toString()
    }
    stages {
        stage('Clean and Setup') {
            steps {
                script {
                    if (params.CLEAN_WS) {
                        cleanWs()
                    }
                    sh """
                        rm -rf *.ipa
                        rm -rf *.zip
                        rm -rf logs/*
                        rm -rf ${env.FRAMEWORK_PATH}
                        rm -rf ${env.UNITY_SDK_PATH}/com.seayoo.sdk
                    """
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    sh 'mkdir -p logs'
                }
            }
        }
        stage('Integrate UnitySDK') {
            steps {
                script {
                    downloadUnitySDK()
                }
            }
        }
        stage('Switch Platform') {
            steps {
                script {
                    def platformFile = 'platform.txt'
                    if (fileExists(platformFile)) {
                        echo 'Current platform was already iOS, skip switch.'
                    } else {
                        callUnity  commands: '-buildTarget iOS'
                        writeFile file: platformFile, text: 'iOS'
                    }
                }
            }
        }
        stage('Gen') {
            steps {
                script {
                    installComboCLI()
                    downloadFrameworks()
                    downloadComboSDKJson()
                }
            }
        }
        stage('Update Settings') {
            environment {
                COMBOSDK_GAME_ID = "${params.GAME_ID}"
                COMBOSDK_ENDPOINT = getEndpoint()
                COMBOSDK_CONFIG_PATH = "${WORKSPACE}/ComboSDK.json"
                ENABLE_IOS_POST_BUILD = "true"
            }
            steps {
                script {
                    def key = params.GAME_ID
                    if (params.GAME_ID == 'catsnsoup' && params.TARGET_ENV == 'dev') {
                        key = 'dev-catsnsoup'
                    }
                    def credentialsId = "combo-${key}.publishable-key"
                    withCredentials([string(variable: 'COMBOSDK_PUBLISHABLE_KEY', credentialsId: credentialsId)]) {
                        callUnity commands: "-executeMethod Builder.UpdateComboSDKSettings"
                    }
                }
            }
        }
        stage('Export Project') {
            environment {
                EXPORT_PATH = "build"
                DEMO_ENDPOINT = getDemoEndpoint()
                BUNDLE_VERSION = "${params.BUNDLE_VERSION}"
                CHECK_UPDATE = "${params.CHECK_UPDATE}"
            }
            steps {
                script {
                    callUnity commands: "-executeMethod Builder.BuildIOSDemo"
                }
            }
        }
        stage('Build IPA') {
            steps {
                script {
                    dir(env.BUILD_DIR) {
                        updateCodeSigningSettings()
                        keychainUnlock()
                        sh """xcodebuild clean archive \
                            -project Unity-iPhone.xcodeproj \
                            -scheme Unity-iPhone \
                            -destination generic/platform=iOS \
                            PROVISIONING_PROFILE_SPECIFIER="${environmentParams[params.GAME_ID]['provision'].toString()}" \
                            -archivePath ${params.GAME_ID}.xcarchive
                        """
                        def credentialsId = "combo-${params.GAME_ID}.export-options"
                        withCredentials([file(variable: 'EXPORT_OPTIONS_PLIST', credentialsId: credentialsId)]) {
                            sh """xcodebuild -exportArchive \
                            -archivePath ${params.GAME_ID}.xcarchive \
                            -exportPath ipa \
                            -exportOptionsPlist \${EXPORT_OPTIONS_PLIST}
                            """
                        }
                    }
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    sh "find ${env.BUILD_DIR}/ipa -name '*.ipa' -exec mv {} ${env.WORKSPACE}/${env.IOS_IPA} \\;"
                    archiveArtifacts artifacts: '*.ipa', onlyIfSuccessful: true
                }
            }
        }
        stage('Upload dSYM') {
            environment {
                DSYM_PATH = "${env.BUILD_DIR}/demo.xcarchive/dSYMs"
            }
            steps {
                withCredentials([string(variable: 'SENTRY_TOKEN', credentialsId: ' sentry-token.seayoo-cn')]) {
                    sh "./combo ios upload-symbols --auth-token $SENTRY_TOKEN --symbols ${DSYM_PATH} --project combo-demo"
                }
            }
        }
    }
    post {
        success {
            script {
                def ipaUrl = "${env.BUILD_URL}artifact/${env.IOS_IPA}"
                def downloads = [
                    ['name': '[ipa]', 'url': ipaUrl]
                ]
                notify withChanges: true, downloads: downloads
            }
        }
        failure {
            notify withChanges: true, withErrors: true
        }
        always {
            script {
                currentBuild.displayName = "${params.GAME_ID} ${params.TARGET_ENV}"
                currentBuild.description = "build_num: ${env.BUILD_NUMBER}"
                zip archive: true, zipFile: 'logs.zip', dir: 'logs'
            }
        }
    }     
}
