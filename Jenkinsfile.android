#!/usr/bin/env groovy

def JDK_VERSION = 'amazon-corretto-11.0.21.9.1'

def callUnity(Map map = [:]) {
    def project = map.get('project', '.')
    def commands = map.get('commands', '')

    def defaultLogFile = env.STAGE_NAME.replaceAll("\\s", "-").toLowerCase()
    def logFile = map.get('logFile', "logs/${defaultLogFile}.log")

    sh "${env.UNITY_ROOT} -projectPath ${project} -quit -batchmode ${commands} -logFile ${logFile}"
}

def downloadUnitySDK() {
    build job: params.UNITY_SDK_PROJECT_NAME, propagate: true, wait: true
    def unitySDKZip = "*.zip"    
    copyArtifacts projectName: "${params.UNITY_SDK_PROJECT_NAME}", selector: lastSuccessful(), filter: unitySDKZip

    def files = findFiles glob: unitySDKZip
    unzip zipFile: files[0].name, dir: env.UNITY_SDK_PATH, quiet: true
}

def writeComboYaml(buildKey) {
    def endpoint = getEndpoint()
    def gameId = params.GAME_ID
    writeFile file: 'combo.yaml', text: """
combo:
  game-id: ${gameId}
  build-key: ${buildKey}
  endpoint: ${endpoint}
"""
}

def installComboCLI() {
    def comboZip = "combo_main_darwin_arm64.zip"
    copyArtifacts projectName: 'SDK/Client/Combo/cli/main', filter: comboZip
    unzip comboZip
}

def getTargetDistros() {
    def choices = ['android', 'xiaomi', 'google_play', 'vivo', 'uc', 'oppo', 'huawei', 'taptap', 'honor', 'm4399', 'bilibili', 'yingyongbao', 'douyin', 'promo_kuaishou', 'promo_douyin', 'promo_tencent']
    return choices.join('\n')
}

def getEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://api.dev.seayoo.com" : "https://api.seayoo.com"
}

def getDemoEndpoint() {
    return (params.TARGET_ENV == "dev") ? "https://combo-demo.dev.seayoo.com" : "https://combo-demo.seayoo.com"
}

pipeline {
    agent {
        node {
            label 'combo-demo:android'
        }
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(
            daysToKeepStr: '15',
            artifactNumToKeepStr: '20'
        ))
        ansiColor('xterm')
        timestamps()
    }
    parameters {
        choice(name: 'GAME_ID', choices: ['demo'], description: 'GAME_ID')
        choice(name: 'TARGET_ENV', choices: ['dev', 'prod'], description: '选择线上/测试环境')
        choice(name: 'DISTRO', choices: getTargetDistros(), description: '选择发行平台')
        string(name: 'BUNDLE_VERSION', defaultValue: '1.0.0', description: 'Demo Bundle Version', trim: true)
        choice(name: 'CHECK_UPDATE', choices: ['SKIP_UPDATE', 'HOT_UPDATE', 'FORCE_UPDATE'], description: '模拟游戏的检查更新行为: SKIP_UPDATE-不更新; HOT_UPDATE-热更新; FORCE_UPDATE-强制更新')
        string(name: 'UNITY_SDK_PROJECT_NAME',
            defaultValue: "SDK/Client/Combo/unity/${env.BRANCH_NAME}",
            description: 'Unity SDK 工程的 Jenkins Full project name',
            trim: true)
        choice(name: 'BUILD_TYPE', choices: ['release', 'debug'], description: '默认不需要关心')
        booleanParam(name: 'CLEAN_WS',
            defaultValue: false,
            description: 'When checked, will clean workspace.')
    }
    environment {
        UNITY_ROOT = getUnityRoot('2019.4.40f1')
        ANDROID_ROOT = "build"     
        APK_NAME = artifactName(name: "combo-demo", extension: "apk")
        UNITY_SDK_PATH = "${env.WORKSPACE}/Packages"
    }
    stages {
        stage('Clean and Setup') {
            steps {
                script {
                    if (params.CLEAN_WS) {
                        cleanWs()
                    }
                    sh """
                        rm -rf ${env.ANDROID_ROOT}/APKs
                        rm -rf *.zip
                        rm -rf *.apk
                        rm -rf logs/*
                        rm -rf "${env.UNITY_SDK_PATH}/com.seayoo.sdk"
                    """
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                    // For Unity Build
                    sh 'mkdir -p logs'
                }
            }
        }
        stage('Integrate UnitySDK') {
            steps {
                script {
                    downloadUnitySDK()
                }
            }
        }
        stage('Switch Platform') {
            steps {
                script {
                    def platformFile = 'platform.txt'
                    if (fileExists(platformFile)) {
                        echo 'Current platform was already Android, skip switch.'
                    } else {
                        callUnity  commands: '-buildTarget Android'
                        writeFile file: platformFile, text: 'Android'
                    }
                }
            }
        }
        stage('Update Settings') {
            environment {
                COMBOSDK_GAME_ID = "${params.GAME_ID}"
                COMBOSDK_ENDPOINT = getEndpoint()
            }
            steps {
                script {
                    def credentialsId = "combo-${params.GAME_ID}.publishable-key"
                    withCredentials([string(variable: 'COMBOSDK_PUBLISHABLE_KEY', credentialsId: credentialsId)]) {
                        callUnity commands: "-executeMethod Builder.UpdateComboSDKSettings"
                    }
                }
            }
        }
        stage('Export Project') {
            environment {
                EXPORT_PATH = "${env.WORKSPACE}/build"
                DEMO_ENDPOINT = getDemoEndpoint()
                BUNDLE_VERSION = "${params.BUNDLE_VERSION}"
                CHECK_UPDATE = "${params.CHECK_UPDATE}"
            }
            steps {
                script {
                    withAndroidSdk("r30.0.2") {
                        withAndroidNdk("r16b") {
                            callUnity commands: "-executeMethod Builder.BuildAndroidDemo"
                        }
                    }
                }
            }
        }
        stage('Build APK') {
            tools {
                jdk JDK_VERSION
            }
            steps {
                script {
                    installComboCLI()

                    sh 'chmod +x ./combo'
                    dir(env.ANDROID_ROOT) {
                        withGradle('6.9.4') {
                            def credentialsId = "combo-${params.GAME_ID}.build-key"
                            withCredentials([string(variable: 'COMBOSDK_BUILD_KEY', credentialsId: credentialsId)]) {
                                writeComboYaml(COMBOSDK_BUILD_KEY)
                            }
                            sh "${env.WORKSPACE}/combo android build --distros ${params.DISTRO}"
                        }
                    }
                }
            }
        }
        stage('Archive') {
            steps {
                script {
                    sh "find ${env.ANDROID_ROOT}/APKs -name '*.apk' -exec mv {} ${env.WORKSPACE}/${env.APK_NAME} \\;"
                    archiveArtifacts artifacts: '*.apk', onlyIfSuccessful: true
                }
            }
        }
        stage('Upload Symbol') {
            steps {
                withSentryCLI() {
                    withCredentials([string(variable: 'SENTRY_TOKEN', credentialsId: ' sentry-token.seayoo-cn')]) {
                        sh """sentry-cli-Darwin-universal --url=https://sentry.seayoo.com upload-dif \
                            --org sentry \
                            --project combo-demo-unity \
                            --auth-token ${SENTRY_TOKEN} \
                            --wait ${env.ANDROID_ROOT}/unityLibrary/src/main/jniLibs/ """
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def apkUrl = "${env.BUILD_URL}artifact/${env.APK_NAME}"
                def downloads = [
                    ['name': '[apk]', 'url': apkUrl]
                ]
                notify withChanges: true, downloads: downloads, what: "**distro: ${params.DISTRO}**"
            }
        }
        failure {
            notify withChanges: true, withErrors: true, what: "**distro: ${params.DISTRO}**"
        }
        always {
            script {
                currentBuild.displayName = "${params.GAME_ID} ${params.TARGET_ENV}"
                currentBuild.description = "build_num: ${env.BUILD_NUMBER} distro: ${params.DISTRO}"
                zip archive: true, zipFile: 'logs.zip', dir: 'logs'
            }
        }
    }    
}
